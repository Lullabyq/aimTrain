!function(){"use strict";class e{constructor(e,t,s){this.screen=e,this.sidebar=t,this.table=s,this.onPointerOver=e=>{!e.target.closest("table")||e.relatedTarget.closest("table")||e.relatedTarget.closest(".game__settings")||(this.sidebar.classList.add("preview"),setTimeout((()=>{this.sidebar.classList.remove("preview")}),200))},this.onPointerOut=e=>{e.relatedTarget&&e.target.closest("table")&&(e.relatedTarget.closest("table")||e.relatedTarget.closest(".game__settings")||this.sidebar.classList.contains("full")&&this.closeSidebar())},this.onPointerLeave=e=>{!e.relatedTarget.closest("table")&&e.target.classList.contains("full")&&this.closeSidebar()}}setTableListeners(){this.screen.addEventListener("pointerover",this.onPointerOver),this.screen.addEventListener("pointerout",this.onPointerOut),this.sidebar.addEventListener("pointerleave",this.onPointerLeave)}removeTableListeners(){this.screen.removeEventListener("pointerover",this.onPointerOver),this.screen.removeEventListener("pointerout",this.onPointerOut),this.sidebar.removeEventListener("pointerleave",this.onPointerLeave)}closeSidebar(){this.sidebar.classList.add("hide__sidebar"),this.sidebar.classList.remove("full"),setTimeout((()=>{this.sidebar.classList.remove("hide__sidebar")}),500)}}class t{constructor(e,t){this.trackedAmount=e,this.newPerf=t,this.mode=this.newPerf.mode,this.time=this.newPerf.time,window.addEventListener("resize",this.makeStaticSidebar.bind(this)),window.addEventListener("load",this.makeStaticSidebar.bind(this))}storeResult(){this._prevResults=this.getLocalData(),this.placeNewResult()}fillLeaderboardTable(e){this.screen=e,this.table=e.querySelector(".leaderboard__table"),this.rows=e.querySelectorAll(".leaderboard__perfomance"),this.createSidebar(),this.insertResult(this.getLocalData()),this.highlightSettings()}createSidebar(){this.settings=this.screen.querySelector(".game__settings"),this.sidebar=new e(this.screen,this.settings,this.table),this.sidebar.setTableListeners(),this.isRemoved=!1,this.settings.addEventListener("click",(e=>{let t=this.settings.classList;if(t.contains("full")||t.contains("game__settings--static")||t.add("full"),!e.target.closest("button")||e.target.classList.contains("active"))return;let s=e.target.closest(".game__settings--option");s.querySelector(".active").classList.remove("active"),e.target.classList.add("active"),s.classList.contains("game--mode")?this.refreshTable(e.target,"mode"):this.refreshTable(e.target,"time")}))}refreshTable(e,t){this[t]=+e.dataset[t],this.insertResult(this.getLocalData())}makeStaticSidebar(){document.documentElement.clientWidth<970&&!this.isRemoved?(this.sidebar.removeTableListeners(),this.isRemoved=!0,this.settings.classList.add("game__settings--static")):document.documentElement.clientWidth>=970&&this.isRemoved&&(this.sidebar.setTableListeners(),this.settings.classList.remove("game__settings--static"),this.isRemoved=!1)}insertResult(e){this.rows.forEach((t=>{t.innerHTML="";let s=Array.from(this.rows).indexOf(t),i=e[s];s==this._positionIndex&&this.mode==this.newPerf.mode&&this.time==this.newPerf.time?(t.classList.add("new__result"),this.createAndFillCells(t,"New",i.score,i.pace,`${i.accuracy} %`)):void 0===i?(t.classList.remove("new__result"),this.createAndFillCells(t,`${s+1})`,"-","-","-")):(t.classList.remove("new__result"),this.createAndFillCells(t,`${s+1})`,i.score,i.pace,`${i.accuracy} %`))}))}createAndFillCells(e,...t){for(let s=0;s<t.length;s++){let i=document.createElement("td");i.innerHTML=t[s],e.append(i)}}highlightSettings(){this.screen.querySelector(`.column__right [data-mode="${this.mode}"]`).classList.add("active"),this.screen.querySelector(`.column__right [data-time="${this.time}"]`).classList.add("active")}getLocalData(){let e=[];for(let t=0;t<this.trackedAmount;t++){let s=JSON.parse(localStorage.getItem(this.generateKey(t+1)));s&&e.push(s)}return e}placeNewResult(){for(let e=0;e<this.trackedAmount;e++)if(this.checkOldPerfomance(this._prevResults[e])){this._positionIndex=e,this.changeStorage();break}}checkOldPerfomance(e){return!e||(this.newPerf.score===e.score?this.newPerf.accuracy>e.accuracy:this.newPerf.score>e.score)}changeStorage(){localStorage.setItem(this.generateKey(this._positionIndex+1),JSON.stringify(this.newPerf));for(let e=this._positionIndex;e<this.trackedAmount-1;e++)this._prevResults[e]&&localStorage.setItem(this.generateKey(e+2),JSON.stringify(this._prevResults[e]))}generateKey(e){return`m${this.mode}, t${this.time}, n${e}`}clearStorage(){return localStorage.clear(),"done -_- as you wished"}}class s{constructor(...e){0!=e.length&&this.createDataProp(...e)}getLocalData(e){let t=JSON.parse(localStorage.getItem(e));t&&this.createDataProp(t.score,t.initTime,t.mode,t.countMiss)}createDataProp(e,t,s,i){let r=i+e,a=(e/t).toFixed(2).toString();"00"==a.slice(-2)?this.pace=+a.slice(0,-2):"0"==a[-1]?this.pace=+a.slice(0,-1):this.pace=+a,this.score=e,this.time=t,this.mode=s,this.accuracy=0===r?0:(e/r*100).toFixed()}}class i{constructor(e,t,s){this.circleColors=["#FFDE40","#9F3ED5","#B9F73E"],this.minDiameter=e,this.maxDiameter=t,this.board=s,this.generateCircleProp()}generateCircleProp(){let e=this.getRandomNumber(0,this.circleColors.length,!0);this.diameter=this.getRandomNumber(this.minDiameter,this.maxDiameter);let t=this.getRandomNumber(0,this.board.offsetHeight-this.diameter),s=this.getRandomNumber(0,this.board.offsetWidth-this.diameter);this.color=this.circleColors[e],this.position=[s,t]}getRandomNumber(e,t,s=!1){let i=e+Math.random()*(t-e);return s?Math.floor(i):i}}let r=document.querySelector("#game");new class{constructor(e){this.box=e,this.startBtn=e.querySelector("#start"),this.screens=e.querySelectorAll(".screen"),this.board=e.querySelector("#board"),this.resultScreen=this.box.querySelector(".result"),this.currentScreenIndex=0,this.score=0,this.countMiss=0,this.placeHint(),window.addEventListener("resize",this.adjustHintToResize.bind(this)),window.addEventListener("load",this.adjustHintToResize.bind(this)),e.addEventListener("click",(e=>{if("A"==e.target.tagName&&(e.preventDefault(),this.changeScreen()),e.target.classList.contains("btn")&&(e.target.classList.contains("btn--mode")&&(this.clearActiveBtn(".btn--mode"),e.target.classList.add("active"),this.mode=+e.target.dataset.mode,this.checkForGameStart()&&(this.changeScreen(),this.startGame())),e.target.classList.contains("btn--time")&&(this.clearActiveBtn(".btn--time"),e.target.classList.add("active"),this.time=+e.target.dataset.time,this.initTime=this.time,this.checkForGameStart()&&(this.changeScreen(),this.startGame())),e.target.classList.contains("btn--back")&&setTimeout((()=>{this.leaderboard.fillLeaderboardTable(this.screens[1]),this.resetGame(),this.changeScreen();let e=this.screens[1].querySelector(".btn--records");e.style.display="flex",e.classList.add("attention"),setTimeout((()=>{e.classList.remove("attention")}),800)}),300)),(e.target.classList.contains("btn--records")||e.target.classList.contains("mask"))&&this.switchModalWindow(e.target),e.target.closest(".board")){if(e.target.classList.contains("clicked"))return;e.target.classList.contains("circle")&&(e.target.classList.add("clicked"),e.target.style.backgroundColor="",clearInterval(this.hideId),this.score++,this.initializeCircle(),this.adjustToMode(),setTimeout((()=>{e.target.remove()}),200)),e.target.classList.contains("board")&&this.countMiss++}}))}adjustHintToResize(){let e=this.box.querySelectorAll(".btn__hint");document.documentElement.clientWidth<775?e.forEach((e=>{e.classList.add("btn__hint--small"),e.style=""})):e[0].classList.contains("btn__hint--small")&&e.forEach((e=>{e.classList.remove("btn__hint--small"),this.placeHint()}))}switchModalWindow(e){let t=this.box.querySelector(e.dataset.nodeSelector);this.mask=this.box.querySelector(".mask"),this.mask.classList.toggle("mask--disabled"),t.hidden=!t.hidden}changeScreen(e=this.currentScreenIndex){this.screens[e].classList.add("up"),this.currentScreenIndex++}checkForGameStart(){return 2==this.box.querySelectorAll(".column__center .active").length}startGame(){let e=this.box.querySelector(".timer__info");this.board.classList.add("wait"),this.board.innerHTML='<h2 class="primary">Go!</h2>',e.classList.add("hide"),setTimeout((()=>{this.board.classList.remove("wait"),this.board.innerHTML="",e.classList.remove("hide"),this.adjustToMode(),this.initializeCircle(),this.timerId=setInterval(this.decreaseTime.bind(this),1e3),this.setTime()}),900),this.clearActiveBtn(".screen__settings .active")}adjustToMode(){switch(this.mode.toString()){case"1":this.MAX__CIRCLE__DIAMETER=60,this.MIN__CIRCLE__DIAMETER=30;break;case"2":this.MAX__CIRCLE__DIAMETER=30,this.MIN__CIRCLE__DIAMETER=18,this.setAutoHiding(this.mode);break;case"3":this.MAX__CIRCLE__DIAMETER=20,this.MIN__CIRCLE__DIAMETER=14,this.setAutoHiding(this.mode)}}finishGame(){let e=this.screens[this.screens.length-1],t=this.box.querySelector(".board--result"),s=e.querySelector(".circle");s&&s.remove(),clearInterval(this.timerId),clearInterval(this.hideId),this.box.querySelector(".timer__info").classList.add("hide"),setTimeout((()=>{e.style.display="none",this.resultScreen.style.display="flex",t.innerHTML=`<h2 class="final__score">Score: <span class='primary'>${this.score}!</span></h2>`,this.processData(this.resultScreen)}),200)}resetGame(){let e=this.screens[this.screens.length-1],t=this.box.querySelector(".board--result");e.style.display="flex",this.resultScreen.style.display="none",t.innerHTML="",this.box.querySelectorAll(".up").forEach((e=>{e.classList.remove("up")})),this.currentScreenIndex=0,this.score=0,this.countMiss=0,this.colorTime("normal"),this.clearActiveBtn(".result .btn");let s=this.board.querySelector(".circle");s&&s.remove(),clearInterval(this.timerId),clearInterval(this.hideId)}clearActiveBtn(e){this.box.querySelectorAll(e).forEach((e=>{e.classList.contains("active")&&e.classList.remove("active")}))}placeHint(){this.box.querySelectorAll(".btn__hint").forEach((e=>{let t=e.previousElementSibling,s=t.getBoundingClientRect(),i=t.offsetTop+s.height+15,r=s.width/2-e.offsetWidth/2;e.style.left=r+"px",e.style.top=i+"px"}))}decreaseTime(){this.time--,this.setTime(),0==this.time&&this.finishGame()}setTime(){this.box.querySelector("#time__seconds").innerHTML=this.time<10?`0${this.time}`:`${this.time}`,this.time<=5&&this.colorTime("warn")}colorTime(e="normal"){let t=this.box.querySelector(".timer__info");"warn"===e?t.classList.add("warn"):(t.classList.contains("warn")&&t.classList.remove("warn"),t.classList.remove("hide"))}initializeCircle(){let e=new i(this.MIN__CIRCLE__DIAMETER,this.MAX__CIRCLE__DIAMETER,this.board),t=document.createElement("div");t.className="circle",t.style.backgroundColor=e.color,t.style.width=`${e.diameter}px`,t.style.height=`${e.diameter}px`,t.style.left=`${e.position[0]}px`,t.style.top=`${e.position[1]}px`,this.board.append(t)}setAutoHiding(e){let t=2==e?1200:1e3;this.hideId=setInterval(this.hideCircle.bind(this),t)}hideCircle(){this.board.querySelector(".circle").remove(),this.initializeCircle()}processData(){let e=new s(this.score,this.initTime,this.mode,this.countMiss);this.leaderboard=new t(3,e),this.leaderboard.storeResult(),this.leaderboard.fillLeaderboardTable(this.resultScreen)}}(r)}();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,